<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd" https="true">
    <meta>
        <author>EQ</author>
        <documentationURL>http://developer.netflix.com/docs/REST_API_Reference#0_52696</documentationURL>
    </meta>
      <bindings>
        <select itemPath="" produces="XML" >
          <urls>
            <url env="all">https://one.ubuntu.com/api/account/</url>
          </urls>
         <paging model="offset">
           <start id="start_index" default="0" />
           <pagesize id="max_results" max="100" />
           <total default="10" />
         </paging>
          <inputs>
                <key id="email" type="xs:string" paramType="variable" required="true" />
                <key id="pwd" type="xs:string" paramType="variable" required="true" />
          </inputs>
          <execute><![CDATA[


// Include the OAuth libraries from oauth.net
y.include("http://oauth.googlecode.com/svn/code/javascript/oauth.js");
y.include("http://oauth.googlecode.com/svn/code/javascript/sha1.js");

function getToken(user, pass, token_name) {
  var url = "https://login.ubuntu.com/api/1.0/authentications";
  var uri = url + "?ws.op=authenticate&token_name=" + encodeURIComponent(token_name);
  var header_auth = 'Basic ' + y.crypto.encodeBase64(user + ":" + pass);

  // Get authentication
  var resp = y.rest(uri).header('Accept', 'application/xml').header('Authorization', header_auth).get().response;

  // cast to string
  var secrets = {
    consumerKey: String(resp.consumer_key),
    consumerSecret: String(resp.consumer_secret),
    token: String(resp.token),
    tokenSecret: String(resp.token_secret)
  };

  return secrets;
}

function registerToken(secrets, user) {
  var url = "https://one.ubuntu.com/oauth/sso-finished-so-get-tokens/" + encodeURIComponent(user);
  var url = "https://one.ubuntu.com/oauth/sso-finished-so-get-tokens/" + user;
  reg = oAuthRequest(url, secrets);

  return reg;
}

function oAuthRequest(url, secrets, method, range) {

  if(!method) method = "GET";

  var message = {
    action: url,
    method: method,
    parameters: [
      ["oauth_consumer_key", secrets.consumerKey],
      ["oauth_token", secrets.token],
      ["oauth_version","1.0"]
    ]
  };

  OAuth.setTimestampAndNonce(message);
  OAuth.SignatureMethod.sign(message, secrets);
  var auth = OAuth.getAuthorizationHeader("", message.parameters);

y.log("oAuthRequest - url: " + url);
y.log("oAuthRequest - message"); y.log(message);
y.log("oAuthRequest - auth"); y.log(auth);

  var resp = y.rest(url).header('Authorization', auth).get().response;

y.log("oAuthRequest (" + url + ") - resp: "); y.log(resp);

  return resp;

}

// Main
var OAuth;
var token_name = "Ubuntu One @test";
var secrets =  getToken(email, pwd, token_name);
//y.log("secrets"); y.log(secrets);

var reg = registerToken(secrets, email);
//y.log("registerToken(" + email + ")"); y.log(reg);


var APIurl = "https://one.ubuntu.com/api/account/";
resp = oAuthRequest(APIurl, secrets);
y.log("resp AuthRequest - url: " + APIurl); y.log(resp);

var APIurl = "https://one.ubuntu.com/api/file_storage/v1";
resp = oAuthRequest(APIurl, secrets);
y.log("resp AuthRequest - url: " + APIurl); y.log(resp);

response.object = <item>
  <url>zut</url>
  <a>a</a>
  <b>b</b>
</item>;
y.exit;

          ]]></execute>
        </select>
      </bindings>
</table>
